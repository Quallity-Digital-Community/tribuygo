{"version":3,"sources":["components/Layout/logo.svg","components/Layout/login.js","components/Layout/header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","config","useStyles","makeStyles","theme","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","form","width","submit","margin","SignIn","React","useState","email","SetEmail","password","SetPassword","classes","Container","component","maxWidth","className","Typography","variant","noValidate","TextField","required","fullWidth","id","label","name","autoComplete","onChange","e","target","value","autoFocus","type","FormControlLabel","control","Checkbox","color","Button","onClick","preventDefault","console","log","process","baseUrl","Grid","container","item","xs","Link","href","background","root","flexGrow","menuButton","marginRight","title","headerStyle","IconButton","height","ButtonAppBar","AppBar","position","style","src","Logo","alt","Toolbar","edge","aria-label","to","path","Login","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1dc972c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.97e84a6d.svg\";","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport axios from 'axios'\nrequire(\"dotenv\").config();\n\n\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.common.white,\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(1),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n\nexport default function SignIn() {\n\n    const [email, SetEmail] = React.useState(null);    \n    const [password, SetPassword] = React.useState(null); \n    \n    function loginClick(e){\n        e.preventDefault();\n        console.log(email);\n        console.log(password);\n        const obj = {\n            email : email,\n            password: password\n        }\n        console.log(process.env.baseUrl);\n        //axios.post(baseUrl,'users/signIn',obj).then()\n    }\n    \n    \n    const classes = useStyles();\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n        \n      <div className={classes.paper}>\n        \n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            onChange = {e => SetEmail(e.target.value)}\n            value = {email}\n            autoFocus\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            value = {password}\n            onChange = {e => SetPassword(e.target.value)}\n            autoComplete=\"current-password\"\n          />\n          <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Remember me\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick = {loginClick}\n            \n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href=\"#\" variant=\"body2\">\n                Forgot password?\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n}","import React from 'react';\nimport {BrowserRouter as Router, Link,Route} from 'react-router-dom';\nimport Login from './login'\nimport Logo from './logo.svg';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nconst useStyles = makeStyles(theme => ({\n  background : '#AF3024',\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst headerStyle = {\n  background:'#AF3024',\n  IconButton :{\n    height: 80,\n  },\n}\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n\n    <Router>\n        <div className={classes.root}>\n          <AppBar position=\"static\" style = {headerStyle} title={<img src={Logo} alt=\"logo pic\" />}>\n            <Toolbar>\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                <img src ={Logo} style = {headerStyle.IconButton} alt = \"logo\"/>\n              </IconButton>\n              <Typography variant=\"h6\" className={classes.title}>\n                \n              </Typography>\n              <Link to = \"/login\"><Button color=\"inherit\">Login </Button></Link>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <Route path = '/login' component = {Login}/> \n    </Router>\n  );\n}","import React, {Fragment} from 'react';\nimport Header from \"./components/Layout/header.js\"\n\nfunction App() {\n  return (\n    <Fragment>\n          <Header/>\n    </Fragment>         \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}